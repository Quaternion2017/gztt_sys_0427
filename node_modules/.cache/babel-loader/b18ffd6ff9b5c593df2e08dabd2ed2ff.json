{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _badge = require('antd/lib/badge');\n\nvar _badge2 = _interopRequireDefault(_badge);\n\nvar _icon = require('antd/lib/icon');\n\nvar _icon2 = _interopRequireDefault(_icon);\n\nvar _spin = require('antd/lib/spin');\n\nvar _spin2 = _interopRequireDefault(_spin);\n\nvar _tabs = require('antd/lib/tabs');\n\nvar _tabs2 = _interopRequireDefault(_tabs);\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _HeaderDropdown = require('../HeaderDropdown');\n\nvar _HeaderDropdown2 = _interopRequireDefault(_HeaderDropdown);\n\nvar _NoticeList = require('./NoticeList');\n\nvar _NoticeList2 = _interopRequireDefault(_NoticeList);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar styles = {\n  'popover': 'antd-pro-notice-icon-popover',\n  'noticeButton': 'antd-pro-notice-icon-noticeButton',\n  'icon': 'antd-pro-notice-icon-icon',\n  'tabs': 'antd-pro-notice-icon-tabs',\n  'ant-tabs-nav-scroll': 'antd-pro-notice-icon-ant-tabs-nav-scroll',\n  'ant-tabs-bar': 'antd-pro-notice-icon-ant-tabs-bar'\n};\nvar TabPane = _tabs2.default.TabPane;\nvar NoticeIcon = (_temp2 = _class = function (_PureComponent) {\n  _inherits(NoticeIcon, _PureComponent);\n\n  function NoticeIcon() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, NoticeIcon);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = NoticeIcon.__proto__ || Object.getPrototypeOf(NoticeIcon)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      visible: false\n    }, _this.onItemClick = function (item, tabProps) {\n      var onItemClick = _this.props.onItemClick;\n      var clickClose = item.clickClose;\n      onItemClick(item, tabProps);\n\n      if (clickClose) {\n        _this.popover.click();\n      }\n    }, _this.onClear = function (name) {\n      var _this$props = _this.props,\n          onClear = _this$props.onClear,\n          clearClose = _this$props.clearClose;\n      onClear(name);\n\n      if (clearClose) {\n        _this.popover.click();\n      }\n    }, _this.onTabChange = function (tabType) {\n      var onTabChange = _this.props.onTabChange;\n      onTabChange(tabType);\n    }, _this.onLoadMore = function (tabProps, event) {\n      var onLoadMore = _this.props.onLoadMore;\n      onLoadMore(tabProps, event);\n    }, _this.handleVisibleChange = function (visible) {\n      var onPopupVisibleChange = _this.props.onPopupVisibleChange;\n\n      _this.setState({\n        visible: visible\n      });\n\n      onPopupVisibleChange(visible);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(NoticeIcon, [{\n    key: 'getNotificationBox',\n    value: function getNotificationBox() {\n      var _this2 = this;\n\n      var visible = this.state.visible;\n      var _props = this.props,\n          children = _props.children,\n          loading = _props.loading,\n          locale = _props.locale;\n\n      if (!children) {\n        return null;\n      }\n\n      var panes = _react2.default.Children.map(children, function (child) {\n        var _child$props = child.props,\n            list = _child$props.list,\n            title = _child$props.title,\n            name = _child$props.name,\n            count = _child$props.count,\n            emptyText = _child$props.emptyText,\n            emptyImage = _child$props.emptyImage,\n            showClear = _child$props.showClear,\n            loadedAll = _child$props.loadedAll,\n            scrollToLoad = _child$props.scrollToLoad,\n            skeletonCount = _child$props.skeletonCount,\n            skeletonProps = _child$props.skeletonProps,\n            tabLoading = _child$props.loading;\n        var len = list && list.length ? list.length : 0;\n        var msgCount = count || count === 0 ? count : len;\n        var tabTitle = msgCount > 0 ? title + ' (' + msgCount + ')' : title;\n        return _react2.default.createElement(TabPane, {\n          tab: tabTitle,\n          key: name\n        }, _react2.default.createElement(_NoticeList2.default, {\n          data: list,\n          emptyImage: emptyImage,\n          emptyText: emptyText,\n          loadedAll: loadedAll,\n          loading: tabLoading,\n          locale: locale,\n          onClear: function onClear() {\n            return _this2.onClear(name);\n          },\n          onClick: function onClick(item) {\n            return _this2.onItemClick(item, child.props);\n          },\n          onLoadMore: function onLoadMore(event) {\n            return _this2.onLoadMore(child.props, event);\n          },\n          scrollToLoad: scrollToLoad,\n          showClear: showClear,\n          skeletonCount: skeletonCount,\n          skeletonProps: skeletonProps,\n          title: title,\n          visible: visible\n        }));\n      });\n\n      return _react2.default.createElement(_react.Fragment, null, _react2.default.createElement(_spin2.default, {\n        spinning: loading,\n        delay: 0\n      }, _react2.default.createElement(_tabs2.default, {\n        className: styles.tabs,\n        onChange: this.onTabChange\n      }, panes)));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var _props2 = this.props,\n          className = _props2.className,\n          count = _props2.count,\n          popupVisible = _props2.popupVisible,\n          bell = _props2.bell;\n      var visible = this.state.visible;\n      var noticeButtonClass = (0, _classnames2.default)(className, styles.noticeButton);\n      var notificationBox = this.getNotificationBox();\n\n      var NoticeBellIcon = bell || _react2.default.createElement(_icon2.default, {\n        type: 'bell',\n        className: styles.icon\n      });\n\n      var trigger = _react2.default.createElement('span', {\n        className: (0, _classnames2.default)(noticeButtonClass, {\n          opened: visible\n        })\n      }, _react2.default.createElement(_badge2.default, {\n        count: count,\n        style: {\n          boxShadow: 'none'\n        },\n        className: styles.badge\n      }, NoticeBellIcon));\n\n      if (!notificationBox) {\n        return trigger;\n      }\n\n      var popoverProps = {};\n\n      if ('popupVisible' in this.props) {\n        popoverProps.visible = popupVisible;\n      }\n\n      return _react2.default.createElement(_HeaderDropdown2.default, _extends({\n        placement: 'bottomRight',\n        overlay: notificationBox,\n        overlayClassName: styles.popover,\n        trigger: ['click'],\n        visible: visible,\n        onVisibleChange: this.handleVisibleChange\n      }, popoverProps, {\n        ref: function ref(node) {\n          return _this3.popover = _reactDom2.default.findDOMNode(node);\n        } // eslint-disable-line\n\n      }), trigger);\n    }\n  }]);\n\n  return NoticeIcon;\n}(_react.PureComponent), _class.Tab = TabPane, _class.defaultProps = {\n  onItemClick: function onItemClick() {},\n  onPopupVisibleChange: function onPopupVisibleChange() {},\n  onTabChange: function onTabChange() {},\n  onClear: function onClear() {},\n  loading: false,\n  clearClose: false,\n  locale: {\n    emptyText: 'No notifications',\n    clear: 'Clear',\n    loadedAll: 'Loaded',\n    loadMore: 'Loading more'\n  },\n  emptyImage: 'https://gw.alipayobjects.com/zos/rmsportal/wAhyIChODzsoKIOBHcBk.svg'\n}, _temp2);\nexports.default = NoticeIcon;\nmodule.exports = exports.default;","map":null,"metadata":{},"sourceType":"script"}